{
  "version": 3,
  "sources": ["../radix-tree.ts"],
  "sourcesContent": ["class RadixNode {\n  value: string;\n  children: Array<RadixNode>;\n  \n  constructor(value: string, children: Array<RadixNode> = []) {\n    this.value = value;\n    this.children = children;\n  }\n\n  addNode(value: string) {\n    this.children.push(new RadixNode(value));\n  }\n}\n\nclass RadixTree {\n  root: RadixNode;\n\n  constructor(children: Array<RadixNode> = []) {\n    this.root = new RadixNode('', children);\n  }\n\n  getPrefix(target: string, node:string): string {\n    const length = Math.min(target.length, node.length);\n    let buffer = '';\n  \n    for (let i = 0; i < length; i++) {\n      if (target[i] !== node[i]) \n        return buffer;\n      \n      buffer += target[i];\n    }\n  \n    return buffer;\n  }\n\n  addWord(value: string, currentNode: RadixNode = this.root) {\n    let current = currentNode.value;\n    let prefix = this.getPrefix(value, current);\n    let target = value.slice(prefix.length);\n    let remaining = '';\n\n    if (prefix.length < current.length) {\n      remaining = current.slice(prefix.length - current.length);\n    }\n\n    if (!target.length) return;\n\n    if (remaining.length) {\n      const promotedChild = new RadixNode(remaining, currentNode.children);\n      const newChild = new RadixNode(target);\n  \n      currentNode.value = prefix;\n      currentNode.children = [promotedChild, newChild];\n    }\n\n    for (const child of currentNode.children) {\n      let childPrefix = this.getPrefix(target, child.value);\n\n      if (childPrefix.length) {\n        this.addWord(target, child);\n        return;\n      }\n    }\n\n    currentNode.addNode(target);\n  }\n\n  \n  traversal(node: RadixNode, array: Array<string> = []) {\n    if (!node) return;\n  \n    for (const child of node.children) {\n      this.traversal(child, array);\n    }\n  \n    array.push(node.value);\n  \n    return array;\n  }\n\n  depthFirstSearch(node: RadixNode, array: Array<string>) {\n    array.push(node.value);\n    \n\t\tfor (const kid of node.children) {\n\t\t\tthis.depthFirstSearch(kid, array);\n\t\t}\n    \n\t\treturn array;\n  }\n  \n  breadthFirstSearch(array: Array<string>, hash: any = {}) {\n    const queue: Array<RadixNode> = [ this.root ];\n    \n    while (queue.length > 0) {\n      let current = queue.shift();\n\n      if (!current) return;\n      \n      for (let child of current.children) {\n        queue.push(child);\n      }\n    }\n    \n    return array;\n  }\n}\n\nconst tree = new RadixTree();\ntree.addWord('ape');\ntree.addWord('apple');\ntree.addWord('romane');\ntree.addWord('romanus');\ntree.addWord('romulus');\ntree.addWord('roman');\ntree.addWord('rubens');\ntree.addWord('rubicon');\ntree.addWord('rubicundus');\n\nconsole.log(tree.root);\n\nlet hash = {};\n\n//console.log(traversal(tree.root));\n\nconst array: Array<string> = [];\n\nconsole.log(tree.traversal(tree.root, array));\n"],
  "mappings": "AAAA,gBAAgB;AAAA,EACd;AAAA,EACA;AAAA,EAEA,YAAY,OAAe,WAA6B,IAAI;AAC1D,SAAK,QAAQ;AACb,SAAK,WAAW;AAAA;AAAA,EAGlB,QAAQ,OAAe;AACrB,SAAK,SAAS,KAAK,IAAI,UAAU;AAAA;AAAA;AAIrC,gBAAgB;AAAA,EACd;AAAA,EAEA,YAAY,WAA6B,IAAI;AAC3C,SAAK,OAAO,IAAI,UAAU,IAAI;AAAA;AAAA,EAGhC,UAAU,QAAgB,MAAqB;AAC7C,UAAM,SAAS,KAAK,IAAI,OAAO,QAAQ,KAAK;AAC5C,QAAI,SAAS;AAEb,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,UAAI,OAAO,OAAO,KAAK;AACrB,eAAO;AAET,gBAAU,OAAO;AAAA;AAGnB,WAAO;AAAA;AAAA,EAGT,QAAQ,OAAe,cAAyB,KAAK,MAAM;AACzD,QAAI,UAAU,YAAY;AAC1B,QAAI,SAAS,KAAK,UAAU,OAAO;AACnC,QAAI,SAAS,MAAM,MAAM,OAAO;AAChC,QAAI,YAAY;AAEhB,QAAI,OAAO,SAAS,QAAQ,QAAQ;AAClC,kBAAY,QAAQ,MAAM,OAAO,SAAS,QAAQ;AAAA;AAGpD,QAAI,CAAC,OAAO;AAAQ;AAEpB,QAAI,UAAU,QAAQ;AACpB,YAAM,gBAAgB,IAAI,UAAU,WAAW,YAAY;AAC3D,YAAM,WAAW,IAAI,UAAU;AAE/B,kBAAY,QAAQ;AACpB,kBAAY,WAAW,CAAC,eAAe;AAAA;AAGzC,eAAW,SAAS,YAAY,UAAU;AACxC,UAAI,cAAc,KAAK,UAAU,QAAQ,MAAM;AAE/C,UAAI,YAAY,QAAQ;AACtB,aAAK,QAAQ,QAAQ;AACrB;AAAA;AAAA;AAIJ,gBAAY,QAAQ;AAAA;AAAA,EAItB,UAAU,MAAiB,SAAuB,IAAI;AACpD,QAAI,CAAC;AAAM;AAEX,eAAW,SAAS,KAAK,UAAU;AACjC,WAAK,UAAU,OAAO;AAAA;AAGxB,WAAM,KAAK,KAAK;AAEhB,WAAO;AAAA;AAAA,EAGT,iBAAiB,MAAiB,QAAsB;AACtD,WAAM,KAAK,KAAK;AAElB,eAAW,OAAO,KAAK,UAAU;AAChC,WAAK,iBAAiB,KAAK;AAAA;AAG5B,WAAO;AAAA;AAAA,EAGP,mBAAmB,QAAsB,QAAY,IAAI;AACvD,UAAM,QAA0B,CAAE,KAAK;AAEvC,WAAO,MAAM,SAAS,GAAG;AACvB,UAAI,UAAU,MAAM;AAEpB,UAAI,CAAC;AAAS;AAEd,eAAS,SAAS,QAAQ,UAAU;AAClC,cAAM,KAAK;AAAA;AAAA;AAIf,WAAO;AAAA;AAAA;AAIX,MAAM,OAAO,IAAI;AACjB,KAAK,QAAQ;AACb,KAAK,QAAQ;AACb,KAAK,QAAQ;AACb,KAAK,QAAQ;AACb,KAAK,QAAQ;AACb,KAAK,QAAQ;AACb,KAAK,QAAQ;AACb,KAAK,QAAQ;AACb,KAAK,QAAQ;AAEb,QAAQ,IAAI,KAAK;AAEjB,IAAI,OAAO;AAIX,MAAM,QAAuB;AAE7B,QAAQ,IAAI,KAAK,UAAU,KAAK,MAAM;",
  "names": []
}
