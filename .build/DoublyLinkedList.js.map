{
  "version": 3,
  "sources": ["../DoublyLinkedList.ts"],
  "sourcesContent": ["type Node<T> = {\n    val: T\n    next?: Node<T>\n    prev?: Node<T>\n}\n\nexport default class DoublyLinkedList<T> {\n    public length: number;\n    private head?: Node<T>;\n    private tail?: Node<T>;\n\n    constructor() {\n        this.head = undefined;\n        this.tail = undefined;\n        this.length = 0;\n    }\n\n    prepend(item: T): void {\n        const node = { val: item } as Node<T>;\n\n        this.length++;\n\n        if (!this.head) {\n            this.head = this.tail = node;\n            return;\n        }\n\n        node.next = this.head;\n        this.head.prev = node;\n        this.head = node;\n    }\n\n    insertAt(item: T, idx: number): void {\n        if (idx > this.length) {\n            throw Error('uh oh...');\n        } else if (idx === this.length) {\n            this.append(item);\n            return;\n        } else if (idx === 0) {\n            this.prepend(item);\n            return;\n        }\n\n        this.length++;\n        const curr = this.getAt(idx) as Node<T>;\n        const node = {val: item} as Node<T>\n\n        node.next = curr;\n        node.prev = curr.prev;\n        curr.prev = node;\n\n        if (node.prev) {\n            node.prev.next = curr;\n        }\n\n    }\n\n    append(item: T): void {\n        const node = {val: item} as Node<T>;\n        this.length++;\n\n        if (!this.tail) {\n            this.head = this.tail = node;\n            return;\n        }\n\n        node.prev = this.tail;\n        this.tail.next = node;\n        this.tail = node;\n    }\n\n    remove(item: T): T | undefined {\n        let curr = this.head;\n        for (let i = 0; curr && i < this.length; ++i) {\n            if (curr.val === item) {\n                break;\n            }\n            curr = curr.next;\n        }\n        if (!curr) {\n            return undefined;\n        }\n\n        return this.removeNode(curr);\n    }\n\n    get(idx: number): T | undefined {\n        return this.getAt(idx)?.val;\n    }\n\n    removeAt(idx: number): T | undefined {\n        const node = this.getAt(idx) ;\n\n        if (!node) {\n            return undefined;\n        }\n\n        return this.removeNode(node);\n    }\n\n    private removeNode(node: Node<T>): T | undefined {\n        this.length--;\n\n        if (this.length === 0) {\n            const out = this.head?.val;\n            this.head = this.tail = undefined;\n            return out;\n        }\n\n        if (node.prev) {\n            node.prev.next = node.next;\n        }\n\n        if (node.next) {\n            node.next.prev = node.prev;\n        }\n\n        if (node === this.head) {\n            this.head = node.next;\n        }\n\n        if (node === this.tail) {\n            this.tail = node.prev;\n        }\n\n        node.prev = node.next = undefined;\n        return node.val;\n    }\n\n    private getAt(idx: number): Node<T> | undefined {\n        let curr = this.head;\n        for (let i = 0; curr && i < idx; ++i) {\n            curr = curr.next;\n        }\n\n        return curr;\n    }\n}"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAMA,uBAAyC;AAAA,EAKrC,cAAc;AACV,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,SAAS;AAAA;AAAA,EAGlB,QAAQ,MAAe;AACnB,UAAM,OAAO,EAAE,KAAK;AAEpB,SAAK;AAEL,QAAI,CAAC,KAAK,MAAM;AACZ,WAAK,OAAO,KAAK,OAAO;AACxB;AAAA;AAGJ,SAAK,OAAO,KAAK;AACjB,SAAK,KAAK,OAAO;AACjB,SAAK,OAAO;AAAA;AAAA,EAGhB,SAAS,MAAS,KAAmB;AACjC,QAAI,MAAM,KAAK,QAAQ;AACnB,YAAM,MAAM;AAAA,eACL,QAAQ,KAAK,QAAQ;AAC5B,WAAK,OAAO;AACZ;AAAA,eACO,QAAQ,GAAG;AAClB,WAAK,QAAQ;AACb;AAAA;AAGJ,SAAK;AACL,UAAM,OAAO,KAAK,MAAM;AACxB,UAAM,OAAO,EAAC,KAAK;AAEnB,SAAK,OAAO;AACZ,SAAK,OAAO,KAAK;AACjB,SAAK,OAAO;AAEZ,QAAI,KAAK,MAAM;AACX,WAAK,KAAK,OAAO;AAAA;AAAA;AAAA,EAKzB,OAAO,MAAe;AAClB,UAAM,OAAO,EAAC,KAAK;AACnB,SAAK;AAEL,QAAI,CAAC,KAAK,MAAM;AACZ,WAAK,OAAO,KAAK,OAAO;AACxB;AAAA;AAGJ,SAAK,OAAO,KAAK;AACjB,SAAK,KAAK,OAAO;AACjB,SAAK,OAAO;AAAA;AAAA,EAGhB,OAAO,MAAwB;AAC3B,QAAI,OAAO,KAAK;AAChB,aAAS,IAAI,GAAG,QAAQ,IAAI,KAAK,QAAQ,EAAE,GAAG;AAC1C,UAAI,KAAK,QAAQ,MAAM;AACnB;AAAA;AAEJ,aAAO,KAAK;AAAA;AAEhB,QAAI,CAAC,MAAM;AACP,aAAO;AAAA;AAGX,WAAO,KAAK,WAAW;AAAA;AAAA,EAG3B,IAAI,KAA4B;AAtFpC;AAuFQ,WAAO,WAAK,MAAM,SAAX,mBAAiB;AAAA;AAAA,EAG5B,SAAS,KAA4B;AACjC,UAAM,OAAO,KAAK,MAAM;AAExB,QAAI,CAAC,MAAM;AACP,aAAO;AAAA;AAGX,WAAO,KAAK,WAAW;AAAA;AAAA,EAGnB,WAAW,MAA8B;AApGrD;AAqGQ,SAAK;AAEL,QAAI,KAAK,WAAW,GAAG;AACnB,YAAM,MAAM,WAAK,SAAL,mBAAW;AACvB,WAAK,OAAO,KAAK,OAAO;AACxB,aAAO;AAAA;AAGX,QAAI,KAAK,MAAM;AACX,WAAK,KAAK,OAAO,KAAK;AAAA;AAG1B,QAAI,KAAK,MAAM;AACX,WAAK,KAAK,OAAO,KAAK;AAAA;AAG1B,QAAI,SAAS,KAAK,MAAM;AACpB,WAAK,OAAO,KAAK;AAAA;AAGrB,QAAI,SAAS,KAAK,MAAM;AACpB,WAAK,OAAO,KAAK;AAAA;AAGrB,SAAK,OAAO,KAAK,OAAO;AACxB,WAAO,KAAK;AAAA;AAAA,EAGR,MAAM,KAAkC;AAC5C,QAAI,OAAO,KAAK;AAChB,aAAS,IAAI,GAAG,QAAQ,IAAI,KAAK,EAAE,GAAG;AAClC,aAAO,KAAK;AAAA;AAGhB,WAAO;AAAA;AAAA;",
  "names": []
}
